The following program submission has been recorded:

Student: jferlazz
Class: CS159
Section: 25336
Assignment: lab06.c
Submission: 2021-03-11 20:29

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. jferlazz@purdue.edu
     5	*  2. armst100@purdue.edu
     6	*  3. oakinley@purdue.edu
     7	*
     8	*  Lab #: 6
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Friday, 2:30 PM, HAMP 3144
    17	*
    18	*  Program Description:
    19	*  This program calculates the orthocenter, circumcenter, the nine point circle center
    20	*  of a triangle created by 3 user entered points. It then determines whether or not the
    21	*  nine point circle is inside or outside the triangle by comparing triangle areas
    22	*
    23	***************************************************************************/
    24	#include <stdio.h>
    25	#include <math.h>
    26	
    27	//Global Decloration
    28	double input(int, int); //input function
    29	
    30	double orthoCenter_x(double, double, double, double, double, double); //Calculates x-coordinate of orthocenter
    31	
    32	double orthoCenter_y(double, double, double, double, double, double, double); //Calculates y-coordinate of orthocenter
    33	
    34	double average(double, double); // takes the average of two values
    35	
    36	//finds the center point of a circle using 3 points on the circle and results are passed by address
    37	void getCircleCenters(double, double, double, double, double, double, double *, double *); 
    38	
    39	double tri_area (double, double, double, double, double, double); //Calculates area of triangle with three defined points
    40	
    41	int insideTriangle(double, double, double, double); //If statement checking points inside the triangle or not 
    42	
    43	void output(double, double, double, double, double, double, int); //Output function that displays coordinates of orthocenter, circumcenter, and nine-point circle center. Also displays whether nine-point circle center is outside the user input triangle.
    44	
    45	int main(void) 
    46	{
    47	  //Local Declaration 
    48	  
    49	  double xCord1; //x-cooridate of point 1
    50	  double yCord1; //y-cooridate of point 1
    51	  double xCord2; //x-cooridate of point 2
    52	  double yCord2; //y-cooridate of point 2
    53	  double xCord3; //x-cooridate of point 30
    54	  double yCord3; //y-cooridate of point 3
    55	  double circumX; //X-coordinate of the circumcenter
    56	  double circumY; //Y-coordinate of the circumcenter
    57	  double ninePointCenterX; //X-coordinate of the nine point circle
    58	  double ninePointCenterY; //X-coordinate of the nine point circle
    59	  double orthx; //X-coordinate of the orthocenter
    60	  double orthy; //Y-coordinate of the orthocenter
    61	  double altx1; //X-coordinate of midpoint between coordinate 1 and orthocenter
    62	  double alty1; //Y-coordinate of midpoint between coordinate 1 and orthocenter
    63	  double altx2; //X-coordinate of midpoint between coordinate 2 and orthocenter
    64	  double alty2; //Y-coordinate of midpoint between coordinate 2 and orthocenter
    65	  double altx3; //X-coordinate of midpoint between coordinate 3 and orthocenter
    66	  double alty3; //Y-coordinate of midpoint between coordinate 3 and orthocenter
    67	  double tri_AB; //Area of triangle formed by points coordinates 1, 2, and nine point circle center
    68	  double tri_BC; //Area of triangle formed by points coordinates 2, 3, and nine point circle center
    69	  double tri_CA; //Area of triangle formed by points coordinates 1, 3, and nine point circle center
    70	  double tri_ABC; //Area of triangle formed by points 1, 2, and 3
    71	  int inside; //variable to determine if the nine point circle is inside the triangle
    72	  
    73	  //Executable Statements
    74	  xCord1 = input('x', 1); //Input of the coordinate x1 point 
    75	  yCord1 = input('y', 1); //Input of the cooridate y1 point
    76	  xCord2 = input('x', 2); //Input of the coordinate x2 point
    77	  yCord2 = input('y', 2); //Input of the coordinate y2 point 
    78	  xCord3 = input('x', 3); //Input of the coordinate x3 point
    79	  yCord3 = input('y', 3); //Input of the coordinate y3 point
    80	
    81	  //x and y coordinates of the orthocenter of the triangle formed by 3 points
    82	  orthx = orthoCenter_x(xCord1, yCord1, xCord2, yCord2, xCord3, yCord3);
    83	  orthy = orthoCenter_y(orthx, xCord1, yCord1, xCord2, yCord2, xCord3, yCord3);
    84	  
    85	  //x and y coordinates of the midpoints between each vertext and the orthocenter (along triangle altitudes)
    86	  altx1 = average(xCord1, orthx);
    87	  alty1 = average(yCord1, orthy);
    88	  altx2 = average(xCord2, orthx);
    89	  alty2 = average(yCord2, orthy);
    90	  altx3 = average(xCord3, orthx);
    91	  alty3 = average(yCord3, orthy);
    92	  
    93	  //Finds Circumcenter Points
    94	  getCircleCenters(xCord1, xCord2, xCord3, yCord1, yCord2, yCord3, &circumX, &circumY);
    95	
    96	  //Finds center of the nine point circle
    97	  getCircleCenters(altx1, altx2, altx3, alty1, alty2, alty3, &ninePointCenterX, &ninePointCenterY);
    98	  
    99	  //Calculate areas of triangles formed by outer triangle points and nine point circle center
   100	  tri_AB = tri_area(xCord1, yCord1, xCord2, yCord2, ninePointCenterX, ninePointCenterY);
   101	  tri_BC = tri_area(xCord2, yCord2, xCord3, yCord3, ninePointCenterX, ninePointCenterY);
   102	  tri_CA = tri_area(xCord3, yCord3, xCord1, yCord1, ninePointCenterX, ninePointCenterY);
   103	  
   104	  //Calculate area of main triangle from input points
   105	  tri_ABC = tri_area(xCord1, yCord1, xCord2, yCord2, xCord3, yCord3);
   106	
   107	  //Returns T/F whether nine point circle center is inside main triangle or outside
   108	  inside = insideTriangle(tri_AB, tri_BC, tri_CA, tri_ABC);
   109	
   110	  output(orthx, orthy, circumX, circumY, ninePointCenterX, ninePointCenterY, inside);
   111	
   112	  return 0;
   113	}
   114	
   115	/***************************************************************************
   116	*
   117	*  Function Information
   118	*
   119	*  Name of Function: input
   120	*
   121	*  Function Return Type: int
   122	*
   123	*  Parameters (list data type, name, and comment one per line):
   124	*    1. int desiredChar // This is the desired type of coorinate either x or y
   125	*    2. int pointNum // This is the desired point number either point 1, 2, 3
   126	*
   127	*  Function Description: This function takes user input for a desired x or y coorinate
   128	*  for either point 1 (A), 2 (B), or 3 (C)
   129	*
   130	***************************************************************************/
   131	double input(int desiredChar, int pointNum)
   132	{
   133	  double coordinate; //user input for coordinate either x or y
   134	  
   135	  //prints a statement that is custom tailored to the desired coorinate
   136	  printf("Enter %c coordinate #%d -> ", desiredChar, pointNum);
   137	  scanf("%lf", &coordinate);
   138	  return(coordinate);
   139	}
   140	
   141	/***************************************************************************
   142	*
   143	*  Function Information
   144	*
   145	*  Name of Function: distance
   146	*
   147	*  Function Return Type: double
   148	*
   149	*  Parameters (list data type, name, and comment one per line):
   150	*    1. double xCord1 // This x-coordinate of the 1st point
   151	*    2. double yCord1 // This y-coordinate of the 1st point
   152	*    3. double xCord2 // This x-coordinate of the 2nd point
   153	*    4. double xCord2 // This x-coordinate of the 2nd point
   154	*
   155	*  Function Description: This function takes 2 points x and y cooridates and finds
   156	*  the distance between the representing a side of the triangle using the center
   157	*  formula distance = sqrt((X2 - X1)^2 + (Y2 - Y1)^2)
   158	*
   159	***************************************************************************/
   160	double distance(double xCord1, double yCord1, double xCord2, double yCord2) //input of the coordinates to find the distance 
   161	{
   162	  //distance = sqrt((X2 - X1)^2 + (Y2 - Y1)^2)
   163	  return(sqrt(pow(xCord2 - xCord1, 2) + pow(yCord2 - yCord1, 2))); 
   164	}
   165	
   166	/***************************************************************************
   167	*
   168	*  Function Information
   169	*
   170	*  Name of Function: orthoCenter_x
   171	*
   172	*  Function Return Type: double
   173	*
   174	*  Parameters (list data type, name, and comment one per line):
   175	*    1. double xCord1 // This x-coordinate of the 1st point
   176	*    2. double yCord1 // This y-coordinate of the 1st point
   177	*    3. double xCord2 // This x-coordinate of the 2nd point
   178	*    4. double yCord2 // This y-coordinate of the 2nd point
   179	*    5. double xCord3 // This x-coordinate of the 3rd point
   180	*    6. double yCord3 // This y-coordinate of the 3rd point
   181	*
   182	*  Function Description: This function use of the inputs to calculate the x 
   183	*  value of orthocenter
   184	*
   185	***************************************************************************/
   186	double orthoCenter_x(double xCord1, double yCord1, double xCord2, double yCord2, double xCord3, double yCord3)
   187	{
   188	  double ortho_x; //x-coordinate of the orthocenter
   189	
   190	  ortho_x = xCord3 * ((xCord1 - xCord2) / (yCord2 - yCord1)) - xCord1 * ((xCord2 - xCord3) / (yCord3 - yCord2)) + yCord1 - yCord3;
   191	
   192	  ortho_x /= (xCord1 - xCord2) / (yCord2 - yCord1) - (xCord2 - xCord3) / (yCord3 - yCord2); // x orthocenter equation 
   193	
   194	  return(ortho_x);
   195	}
   196	
   197	/***************************************************************************
   198	*
   199	*  Function Information
   200	*
   201	*  Name of Function: orthoCenter_y
   202	*
   203	*  Function Return Type: double
   204	*
   205	*  Parameters (list data type, name, and comment one per line):
   206	*    1. double xCord1 // This x-coordinate of the 1st point
   207	*    2. double yCord1 // This y-coordinate of the 1st point
   208	*    3. double xCord2 // This x-coordinate of the 2nd point
   209	*    4. double yCord2 // This y-coordinate of the 2nd point
   210	*    5. double xCord3 // This x-coordinate of the 3rd point
   211	*    6. double yCord3 // This y-coordinate of the 3rd point
   212	*
   213	*  Function Description: This function finds x coordinate of the orthocenter
   214	*
   215	***************************************************************************/
   216	double orthoCenter_y(double ortho_x, double xCord1, double yCord1, double xCord2, double yCord2, double xCord3, double yCord3)
   217	{
   218	  double ortho_y; //y coordinate of the orthocenter
   219	
   220	  ortho_y = ((xCord2 - xCord3) / (yCord3 - yCord2)) * (ortho_x - xCord1) + yCord1; // equation to find relating part 
   221	
   222	  return(ortho_y);
   223	}
   224	
   225	/***************************************************************************
   226	*
   227	*  Function Information
   228	*
   229	*  Name of Function: avergage
   230	*
   231	*  Function Return Type: double
   232	*
   233	*  Parameters (list data type, name, and comment one per line):
   234	*    1. double val1 // value of points to find the center point 
   235	*    2. double val2 // value of points to find the center point 
   236	*
   237	*  
   238	*  Function Description: This function find the average of two points to find the center point 
   239	*
   240	***************************************************************************/
   241	double average(double val1, double val2)
   242	{
   243	  return((val1 + val2) / 2); //finds the average of the points 
   244	}
   245	
   246	/***************************************************************************
   247	*
   248	*  Function Information
   249	*
   250	*  Name of Function: getCircleCenters
   251	*
   252	*  Function Return Type: void
   253	*
   254	*  Parameters (list data type, name, and comment one per line):
   255	*    1. double cordX1 // This x-coordinate of the 1st point
   256	*    2. double cordX2 // This x-coordinate of the 2nd point
   257	*    3. double cordX3 // This x-coordinate of the 3rd point
   258	*    4. double cordY1 // This y-coordinate of the 1st point
   259	*    5. double cordY2 // This y-coordinate of the 2nd point
   260	*    6. double cordY3 // This y-coordinate of the 3rd point
   261	*    7. double *centerX // x value of the circle center passed by address 
   262	*    8. double *centerY // y value of the circle center passed by address 
   263	*
   264	*  Function Description: This function calculates the center of any circle given
   265	*  3 points, using coordinates and the slopes between coordinates
   266	*
   267	***************************************************************************/
   268	void getCircleCenters(double cordX1, double cordX2, double cordX3, double cordY1, double cordY2, double cordY3, double *centerX, double *centerY)
   269	{
   270	  double deltaY1; //distance between the 2nd and 1st y-cord
   271	  double deltaX1; //distance between the 2nd and 1st x-cord
   272	  double deltaY2; //distance between the 3rd and 2nd y-cord
   273	  double deltaX2; //distance between the 3rd and 2nd x-cord
   274	  double slope1; //slope between points 1 and 2
   275	  double slope2; //slope between points 2 and 3
   276	  
   277	  //Calculates deltas
   278	  deltaY1 = cordY2 - cordY1;
   279	  deltaX1 = cordX2 - cordX1;
   280	  deltaY2 = cordY3 - cordY2;
   281	  deltaX2 = cordX3 - cordX2;
   282	  
   283	  //Calculates Slope
   284	  slope1 = deltaY1 / deltaX1;
   285	  slope2 = deltaY2 / deltaX2;
   286	
   287	  //Calculates x point of the center, and passes it by address back to the called function 
   288	  *centerX = (slope1 * slope2 * (cordY1 - cordY3) + slope2 * (cordX1 + cordX2) - slope1 * (cordX2 + cordX3));
   289	  *centerX /= (2 * (slope2 - slope1));
   290	  //Calculates y point of the center, and passes it by address back to the called function 
   291	  *centerY = -1 * (*centerX - (cordX1 + cordX2) / 2) / slope1 + (cordY1 + cordY2) / 2;
   292	}
   293	
   294	/***************************************************************************
   295	*
   296	*  Function Information
   297	*
   298	*  Name of Function: tri_area
   299	*
   300	*  Function Return Type: double
   301	*
   302	*  Parameters (list data type, name, and comment one per line):
   303	*    1. double xCord1// This x-coordinate of the 1st point
   304	*    2. double yCord1// This y-coordinate of the 1st point
   305	*    3. double xCord2// This x-coordinate of the 2nd point
   306	*    4. double yCord2// This y-coordinate of the 2nd point
   307	*    5. double xCord3// This x-coordinate of the 3rd point
   308	*    6. double yCord3// This y-coordinate of the 3rd point
   309	*
   310	*  Function Description: This function calculates the area of a triangle formed by three input coordinates.
   311	*
   312	***************************************************************************/
   313	double tri_area (double xCord1, double yCord1, double xCord2, double yCord2, double xCord3, double yCord3) 
   314	{
   315	  double area; //area of the triangle
   316	  
   317	  area = (xCord1 * (yCord2 - yCord3) + xCord2 * (yCord3 - yCord1) + xCord3 * (yCord1 - yCord2)) / 2;
   318	  
   319	  return(fabs(area)); //ensures the area is positive
   320	}
   321	
   322	/***************************************************************************
   323	*
   324	*  Function Information
   325	*
   326	*  Name of Function: insideTriangle
   327	*
   328	*  Function Return Type: int
   329	*
   330	*  Parameters (list data type, name, and comment one per line):
   331	*    1. double tri_AB // side length AB of triangle 
   332	*    2. double tri_BC // side length BC of triangle
   333	*    3. double tri_CA //side length CA of triangle
   334	*    4. double tri_ABC // side lenght of the triangle ABC
   335	*
   336	*  Function Description: This function find whether the nine point circle
   337	*  is inside the triangle (returning a 1) or outside (returning a 0)
   338	*
   339	***************************************************************************/
   340	int insideTriangle(double tri_AB, double tri_BC, double tri_CA, double tri_ABC)
   341	{
   342	  double sum; //sum of 3 smaller triangles
   343	  int insideValue; //value return (1 if inside the triangle 0 if not)
   344	  
   345	  sum = tri_AB + tri_BC + tri_CA;
   346	  
   347	  if (sum <= tri_ABC + .001 && sum >= tri_ABC - .001) //thereshold of .001
   348	  {
   349	    insideValue = 1;
   350	  }
   351	  else
   352	  {
   353	    insideValue = 0;
   354	  }
   355	  return(insideValue);
   356	}
   357	
   358	/***************************************************************************
   359	*
   360	*  Function Information
   361	*
   362	*  Name of Function: output
   363	*
   364	*  Function Return Type: void
   365	*
   366	*  Parameters (list data type, name, and comment one per line):
   367	*    1. double orthx // orthocenter of x 
   368	*    2. double orthy // orthocenter of y 
   369	*    3. double circumX //circumcenter of x 
   370	*    4. double circumY //circumcenter of y
   371	*    5. double ninePointCenterX // the nine point of the center for x 
   372	*    6. double ninePointCenterY // the nine point of the center for y
   373	*    7. int inside // the area of the triangle in relation to being in or out 
   374	*
   375	*  Function Description: Outputs the desired values as outlined by the lab
   376	*
   377	***************************************************************************/
   378	void output(double orthx, double orthy, double circumX, double circumY, double ninePointCenterX, double ninePointCenterY, int inside)
   379	{
   380	  printf("\nCoordinates of orthocenter: %.2lf, %.2lf\n", orthx, orthy);
   381	  printf("Coordinates of circumcenter: %.2lf, %.2lf\n", circumX, circumY);
   382	  if(inside == 1)
   383	  {
   384	    printf("The nine point circle center: %.2lf, %.2lf is inside of the triangle.\n", ninePointCenterX, ninePointCenterY);
   385	  }
   386	  else
   387	  {
   388	    printf("The nine point circle center: %.2lf, %.2lf is outside of the triangle.\n", ninePointCenterX, ninePointCenterY);
   389	  }
   390	}
