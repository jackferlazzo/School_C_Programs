The following program submission has been recorded:

Student: jferlazz
Class: CS159
Section: 25336
Assignment: lab04.c
Submission: 2021-02-26 16:27

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. jferlazz@purdue.edu
     5	*  2. armst100@purdue.edu
     6	*  3. oakinley@purdue.edu
     7	*
     8	*  Lab #: 4
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Friday, 2:30 PM, HAMP 3144
    17	*
    18	*  Program Description:
    19	*  This program calculates the side lengths of a triangle formed by 3 x-y coordinates  *  given by the user, as well as the location of the incenter between these points.
    20	*
    21	***************************************************************************/
    22	#include <stdio.h>
    23	#include <math.h>
    24	
    25	//Global Declarations 
    26	int inputX1(void); //input 1
    27	int inputY1(void); //input 2
    28	int inputX2(void); //input 3
    29	int inputY2(void); //input 4
    30	int inputX3(void); //input 5
    31	int inputY3(void); //input 6 
    32	void output(double,double,double,double,double); //Output 
    33	double calcDistance(int,int,int,int); //General function to calculate distance 
    34	double inCenterPoint(double,double,double,int,int,int); //General function to calculate both in centers 
    35	
    36	int main(void) // Main function 
    37	{
    38	  //Local Declarations
    39	  
    40	  int xPoint1; //point 1 x-value
    41	  int xPoint2; //point 2 x-value 
    42	  int xPoint3; //point 3 x-value
    43	  int yPoint1; //point 1 y-value
    44	  int yPoint2; //point 2 y-value
    45	  int yPoint3; //point 3 y-value
    46	  
    47	  double distanceOneTwo; //distance between point 1 and 2
    48	  double distanceTwoThree; //distance between point 2 and 3 
    49	  double distanceThreeOne;  //distance between point 3 and 1
    50	  
    51	  double inCenterX; //x-value of the incenter point
    52	  double inCenterY; //y-value of the incenter point 
    53	  //Executable Statements
    54	  
    55	  xPoint1 = inputX1(); // relate x1 to input x1 
    56	  yPoint1 = inputY1(); // relate y1 to input y2 
    57	  xPoint2 = inputX2(); // relate x2 to input x2 
    58	  yPoint2 = inputY2(); // relate y2 to input y2 
    59	  xPoint3 = inputX3(); // relate x3 to input x3
    60	  yPoint3 = inputY3(); // relate y3 to input y3 
    61	
    62	  // Calculation of distances between each point
    63	  distanceOneTwo = calcDistance(xPoint1,xPoint2,yPoint1,yPoint2);
    64	  distanceTwoThree = calcDistance(xPoint2,xPoint3,yPoint2,yPoint3);
    65	  distanceThreeOne = calcDistance(xPoint3,xPoint1,yPoint3,yPoint1);
    66	  
    67	  //Calculation of each incenter point 
    68	  inCenterX = inCenterPoint(distanceTwoThree, distanceThreeOne, distanceOneTwo, xPoint1, xPoint2, xPoint3);
    69	  inCenterY = inCenterPoint(distanceTwoThree, distanceThreeOne, distanceOneTwo, yPoint1, yPoint2, yPoint3);
    70	
    71	  //Outputs desired values
    72	  output(distanceOneTwo,distanceTwoThree,distanceThreeOne,inCenterX, inCenterY);
    73	  return (0);
    74	}
    75	/***************************************************************************
    76	*
    77	*  Function Information
    78	*
    79	*  Name of Function: inputX1
    80	*
    81	*  Function Return Type: Int
    82	*
    83	*  Parameters (list data type, name, and comment one per line):
    84	*    1. NA
    85	*
    86	*  Function Description: This function takes input on point 1's x-value and
    87	*  returns this input
    88	*
    89	***************************************************************************/
    90	
    91	int inputX1()
    92	{
    93	  int xPoint1; //user input for x value of point 1
    94	  printf("Enter X coordinate #1 -> ");
    95	  scanf("%d", &xPoint1);
    96	  return(xPoint1);
    97	}
    98	
    99	/***************************************************************************
   100	*
   101	*  Function Information
   102	*
   103	*  Name of Function: inputX2
   104	*
   105	*  Function Return Type: Int
   106	*
   107	*  Parameters (list data type, name, and comment one per line):
   108	*    1. NA
   109	*
   110	*  Function Description: This function takes input on point 2's x-value and
   111	*  returns this input
   112	*
   113	***************************************************************************/
   114	
   115	int inputX2()
   116	{
   117	  int xPoint2; //user iput for x value of point 2
   118	  printf("Enter X coordinate #2 -> ");
   119	  scanf("%d", &xPoint2);
   120	  return(xPoint2);
   121	}
   122	
   123	/***************************************************************************
   124	*
   125	*  Function Information
   126	*
   127	*  Name of Function: inputX3
   128	*
   129	*  Function Return Type: Int
   130	*
   131	*  Parameters (list data type, name, and comment one per line):
   132	*    1. NA
   133	*
   134	*  Function Description: This function takes input on point 3's x-value and
   135	*  returns this input
   136	*
   137	***************************************************************************/
   138	
   139	int inputX3()
   140	{
   141	  int xPoint3; //user input for x value of point 3
   142	  printf("Enter X coordinate #3 -> ");
   143	  scanf("%d", &xPoint3);
   144	  return(xPoint3);
   145	}
   146	
   147	/***************************************************************************
   148	*
   149	*  Function Information
   150	*
   151	*  Name of Function: inputY1
   152	*
   153	*  Function Return Type: Int
   154	*
   155	*  Parameters (list data type, name, and comment one per line):
   156	*    1. NA
   157	*
   158	*  Function Description: This function takes input on point 1's y-value and
   159	*  returns this input
   160	*
   161	***************************************************************************/
   162	
   163	int inputY1()
   164	{
   165	  int yPoint1; //user input for y value of point 1
   166	  printf("Enter Y coordinate #1 -> ");
   167	  scanf("%d", &yPoint1);
   168	  return(yPoint1);
   169	}
   170	
   171	/***************************************************************************
   172	*
   173	*  Function Information
   174	*
   175	*  Name of Function: inputY2
   176	*
   177	*  Function Return Type: Int
   178	*
   179	*  Parameters (list data type, name, and comment one per line):
   180	*    1. NA
   181	*
   182	*  Function Description: This function takes input on point 2's y-value and
   183	*  returns this input
   184	*
   185	***************************************************************************/
   186	
   187	int inputY2()
   188	{
   189	  int yPoint2; // user input for y value of point 2
   190	  printf("Enter Y coordinate #2 -> ");
   191	  scanf("%d", &yPoint2);
   192	  return(yPoint2);
   193	}
   194	
   195	/***************************************************************************
   196	*
   197	*  Function Information
   198	*
   199	*  Name of Function: inputY3
   200	*
   201	*  Function Return Type: Int
   202	*
   203	*  Parameters (list data type, name, and comment one per line):
   204	*    1. NA
   205	*
   206	*  Function Description: This function takes input on point 3's y-value and
   207	*  returns this input
   208	*
   209	***************************************************************************/
   210	
   211	int inputY3()
   212	{
   213	  int yPoint3; // user input for y value of point 3
   214	  printf("Enter Y coordinate #3 -> ");
   215	  scanf("%d", &yPoint3);
   216	  return(yPoint3);
   217	}
   218	
   219	/***************************************************************************
   220	*
   221	*  Function Information
   222	*
   223	*  Name of Function: calcDistance
   224	*
   225	*  Function Return Type: double
   226	*
   227	*  Parameters (list data type, name, and comment one per line):
   228	*    1. int x1 this is the x value of the first point
   229	*    2. int x2 this is the x value of the second point
   230	*    3. int y1 this is the y value of the first point
   231	*    4. int y2 this is the y value of the first point
   232	*
   233	*  Function Description: This function uses the distance formula to calculate
   234	*  the distance between to sent in points and return this calculated value as
   235	*  a double
   236	*
   237	***************************************************************************/
   238	
   239	double calcDistance(int x1, int x2, int y1, int y2)
   240	{
   241	  return(sqrt(pow(x2 - x1, 2) + pow(y2 - y1,2)));
   242	}
   243	
   244	/***************************************************************************
   245	*
   246	*  Function Information
   247	*
   248	*  Name of Function: inCenterPoint
   249	*
   250	*  Function Return Type:
   251	*
   252	*  Parameters (list data type, name, and comment one per line):
   253	*    1. double sideOpp1 this is the length of the side oppisite point 1 so the 
   254	*         distance between point 2 to 3
   255	*    2. double sideOpp2 this is the length of the side oppisite point 2 so the 
   256	*         distance between point 3 to 1
   257	*    3. double sideOpp3 this is the length of the side oppisite point 1 so the 
   258	*         distance between point 1 to 2
   259	*    4. int coordinate1 this is the coordinate of point 1 whether it be the x or y 
   260	*         coordinate
   261	*    5. int coordinate2 this is the coordinate of point 2 whether it be the x or y 
   262	*         coordinate
   263	*    6. int coordinate3 this is the coordinate of point 3 whether it be the x or y 
   264	*         coordinate
   265	*
   266	*  Function Description: This function calculates either the x or y cooridinate of the 
   267	*  circle's incenter depending whether x coordinates or y coordinates are sent in. 
   268	*  To calculate the incenter coordinate the formula
   269	*  ((ax1 + bx2 + cx3) / (a + b + c), (ay1 + by2 + cy3) / (a + b + c)) was used, 
   270	*  a being sideOpp1, b being sideOpp2,*  c being sideOpp3, x1 and y1 being coordinate 1,
   271	*  x2 and y2 being coordinate 2, and x3 and y3 being coordinate 3,
   272	*
   273	***************************************************************************/
   274	
   275	double inCenterPoint(double sideOpp1, double sideOpp2, double sideOpp3, int coordinate1, int coordinate2,int coordinate3)
   276	{
   277	  double sumOfSides = sideOpp1 + sideOpp2 + sideOpp3; //sum of all side lengths
   278	  double topEvaluation = ((sideOpp1 * coordinate1) + (sideOpp2 * coordinate2) + (sideOpp3 * coordinate3)); //ax1 + bx2 + cx3 or ay1 + by2 + cy3
   279	  return(topEvaluation / sumOfSides); //finishes off formula
   280	}
   281	
   282	/***************************************************************************
   283	*
   284	*  Function Information
   285	*
   286	*  Name of Function: inCenterPoint
   287	*
   288	*  Function Return Type: void
   289	*
   290	*  Parameters (list data type, name, and comment one per line):
   291	*    1. double distanceOneTwo this is the distance between point 1 and 2
   292	*    2. double distanceTwoThree this is the distance between point 2 and 3
   293	*    3. double distanceThreeOne this is the distance between point 3 and 1
   294	*    4. double inCenterX this is the x coorinate of the incenter point
   295	*    5. double inCenterY this is the y coorinate of the incenter point
   296	*
   297	*  Function Description: This function outputs the desired values as specified 
   298	*  in the lab
   299	*
   300	***************************************************************************/
   301	void output(double distanceOneTwo, double distanceTwoThree,double distanceThreeOne,double inCenterX, double inCenterY)
   302	{
   303	  printf("\nDistance from point 1 to point 2: %.2lf",distanceOneTwo);
   304	  printf("\nDistance from point 2 to point 3: %.2lf",distanceTwoThree);
   305	  printf("\nDistance from point 3 to point 1: %.2lf",distanceThreeOne);
   306	  printf("\nLocation of incenter: %.2lf, %.2lf\n", inCenterX, inCenterY);
   307	}