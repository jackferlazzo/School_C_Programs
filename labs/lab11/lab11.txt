The following program submission has been recorded:

Student: jferlazz
Class: CS159
Section: 25336
Assignment: lab11.c
Submission: 2021-04-28 15:55

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	* Programmers and Purdue Email Addresses:
     4	* 1. tlirette@purdue.edu
     5	* 2. jferlazz@purdue.edu
     6	* 3. albarkat@purdue.edu
     7	*
     8	* Lab #: 11
     9	*
    10	* Academic Integrity Statement:
    11	*
    12	* We have not used source code obtained from any other unauthorized source,
    13	* either modified or unmodified. Neither have we provided access to our code
    14	* to another. The effort we are submitting is our own original work.
    15	*
    16	* Day, Time, Location of Lab: Friday, 2:30 PM, HAMP 3144
    17	*
    18	* Program Description: This program takes a user inputted array of values and the size of
    19	* that array of values, it then sorts the array while maintaining even and odd numbers in the
    20	* same indices as the original array of values. THe program then outputs this list in a
    21	* formatted manner as outlined in the lab
    22	*
    23	***************************************************************************/
    24	
    25	#include <stdio.h>
    26	#include <stdlib.h>
    27	
    28	int inputSize(void);
    29	void inputList(int*, int);
    30	void printFinal(int* , int);
    31	void sortArray(int* , int);
    32	
    33	int main(void) 
    34	{
    35	  //Local Declarations
    36	  int *data; //array which stores data
    37	  int size; //size of array
    38	
    39	  //Executable Statements
    40	  
    41	  //inputs
    42	  size = inputSize(); 
    43	  data = (int*)malloc(sizeof(int) * size);
    44	  inputList(data, size); 
    45	
    46	  //calculations
    47	  sortArray(data, size);
    48	
    49	  //Output
    50	  printFinal(data, size);
    51	  return 0;
    52	}
    53	
    54	/***************************************************************************
    55	*
    56	* Function Information
    57	*
    58	* Name of Function: inputSize
    59	*
    60	* Function Return Type: int
    61	*
    62	* Parameters (list data type, name, and comment one per line):
    63	* 1. NA
    64	*
    65	* Function Description:  This function allows the user to input the desired size of an array
    66	*
    67	***************************************************************************/
    68	int inputSize()
    69	{
    70	  int size; //user inputted size of the array
    71	
    72	  printf("Enter data set size -> ");
    73	  scanf("%d", &size);
    74	
    75	  return(size);
    76	}
    77	
    78	/***************************************************************************
    79	*
    80	* Function Information
    81	*
    82	* Name of Function: sortArray
    83	*
    84	* Function Return Type: void
    85	*
    86	* Parameters (list data type, name, and comment one per line):
    87	* 1. int* input //input data
    88	* 2. int size //size of array
    89	*
    90	* Function Description: Sorts an array based on given criteria for lab.  
    91	*
    92	***************************************************************************/
    93	
    94	void sortArray(int *input, int size)
    95	{
    96	  int insideCount; //iterator for most inside loop
    97	  int innerCount; //iterator for outer loop
    98	  int outerCount; //iterator for inner loop
    99	  int hold; //holds value for exchanging values
   100	
   101	  for(outerCount = 0; outerCount < size ; outerCount++) //for every value in array starting from top
   102	  {
   103	    for(innerCount = 0; innerCount < size; innerCount++) //for every other value in the array
   104	    {
   105	      for(insideCount = 0; insideCount < size; insideCount++)
   106	      {
   107	        if(( * (input + insideCount) > * (input + innerCount)) && ( * (input + innerCount) % 2 == * (input + insideCount) % 2)) //if the value after it is smaller switch the two values
   108	        {
   109	          hold = * (input + innerCount);
   110	          * (input + innerCount) = * (input + insideCount);
   111	          * (input + insideCount) = hold;
   112	        }
   113	      }
   114	    }
   115	  }
   116	}
   117	
   118	/***************************************************************************
   119	*
   120	* Function Information
   121	*
   122	* Name of Function: inputList
   123	*
   124	* Function Return Type: void
   125	*
   126	* Parameters (list data type, name, and comment one per line):
   127	* 1. int* data //integer array
   128	* 2. int size //size of integer array
   129	*
   130	* Function Description: User inputs array of integers
   131	*
   132	***************************************************************************/
   133	void inputList(int* data, int size)
   134	{
   135	  int count; //array index
   136	
   137	  printf("Enter %d integer values -> ", size);
   138	
   139	  for(count = 0; count < size; count++)
   140	  {
   141	    scanf("%d", data + count);
   142	  }
   143	}
   144	
   145	/***************************************************************************
   146	*
   147	* Function Information
   148	*
   149	* Name of Function: printOutput
   150	*
   151	* Function Return Type: void
   152	*
   153	* Parameters (list data type, name, and comment one per line):
   154	* 1. int* data //final sorted array
   155	* 2. int size //size of the sorted array
   156	*
   157	* Function Description: Prints output array in formatted manner
   158	*
   159	***************************************************************************/
   160	void printFinal(int *data, int size)
   161	{
   162	  int i; //array index
   163	  printf("\nFinal data set order: ");
   164	  for(i = 0; i < size; i++)
   165	  {
   166	    printf("%d ", * (data + i));
   167	  } 
   168	
   169	  printf("\n");
   170	}
