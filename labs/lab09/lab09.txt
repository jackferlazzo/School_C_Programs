The following program submission has been recorded:

Student: jferlazz
Class: CS159
Section: 25336
Assignment: lab09.c
Submission: 2021-04-07 16:17

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	* Programmers and Purdue Email Addresses:
     4	* 1. tlirette@purdue.edu
     5	* 2. jferlazz@purdue.edu
     6	* 3. albarkat@purdue.edu
     7	*
     8	* Lab #: 9
     9	*
    10	* Academic Integrity Statement:
    11	*
    12	* We have not used source code obtained from any other unauthorized source,
    13	* either modified or unmodified. Neither have we provided access to our code
    14	* to another. The effort we are submitting is our own original work.
    15	*
    16	* Day, Time, Location of Lab: Friday, 2:30 PM, HAMP 3144
    17	*
    18	* Program Description: Program that given twenty non-negative decimal integer values 
    19	* as input converts all odd numbers into binary and even numbers into octal.
    20	*
    21	***************************************************************************/
    22	
    23	#include <stdio.h>
    24	#include <math.h>
    25	#include <stdlib.h>
    26	
    27	#define SIZE 20 //size of the input array
    28	
    29	void input(int[]);
    30	int getOctal(int); 
    31	int getBinary(int);
    32	int ConvertAdd(int,int);
    33	int countOdds(int[]);
    34	int countEvens(int[]);
    35	void binaryArray(int[]);
    36	void convertArray(int[], int, int);
    37	void printArrays(int[], int[], int, int);
    38	
    39	int main(void) 
    40	{
    41	  int decimal[SIZE]; //stores input decimal values
    42	  int binarySize; //stores number of binary numbers to be output
    43	  int octalSize; //stores number of octal numbers to be output
    44	
    45	  input(decimal); //gets input
    46	  binarySize = countOdds(decimal); //calculate values
    47	  octalSize = countEvens(decimal);
    48	  convertArray(decimal, binarySize, octalSize); //outputs data
    49	  
    50	  return 0;
    51	}
    52	
    53	/***************************************************************************
    54	*
    55	* Function Information
    56	*
    57	* Name of Function: input
    58	*
    59	* Function Return Type: int
    60	*
    61	* Parameters (list data type, name, and comment one per line):
    62	* 1. int decimals[] //This is the list of decimal values inputted by the user
    63	*
    64	* Function Description: This function takes user input on 20 non-negative decimal values,
    65	* and stores them in an array
    66	*
    67	***************************************************************************/
    68	
    69	void input(int decimals[])
    70	{
    71	  int count; //counter variable for the for loop to scan in values
    72	  printf("Enter 20 integer values -> ");
    73	  for (count = 0; count < 20; count++)
    74	  {
    75	    scanf("%d", &decimals[count]);
    76	  }
    77	}
    78	
    79	/***************************************************************************
    80	*
    81	* Function Information
    82	*
    83	* Name of Function: getOctal
    84	*
    85	* Function Return Type: int
    86	*
    87	* Parameters (list data type, name, and comment one per line):
    88	* 1. int base10 //the initial decimal number
    89	*
    90	* Function Description: Returns the octal value given a decimal number
    91	*
    92	***************************************************************************/
    93	
    94	int getOctal(int base10)
    95	{
    96	  int digit; //the decimal place of each digit in the number
    97	  int remainder; //the remainder of the decimal number divided by 8 (1 for ones place, 2 for tens place, etc.)
    98	  int oct; //the current octal value
    99	  
   100	  //set intial conditions
   101	  oct = 0; //octal number
   102	  digit = 0; //digit of the octal number
   103	  
   104	  while(base10 != 0)
   105	  {
   106	    remainder = base10 % 8;
   107	    base10 /= 8;
   108	    digit++;
   109	    oct += ConvertAdd(remainder, digit);
   110	  }
   111	  return(oct);
   112	}
   113	
   114	/***************************************************************************
   115	*
   116	* Function Information
   117	*
   118	* Name of Function: ConvertAdd
   119	*
   120	* Function Return Type: int
   121	*
   122	* Parameters (list data type, name, and comment one per line):
   123	* 1. int remainder //the remainder of the decimal number divided by base
   124	* 2. int digit //the decimal place of each digit in the number (1 for ones place, 2 for tens place, etc.)
   125	*
   126	* Function Description: Returns the digit that will be added to the current value when converting to another number storage method
   127	*
   128	***************************************************************************/
   129	
   130	int ConvertAdd(int remainder, int digit)
   131	{
   132	  int newOct; //the digit being added on to the current octal value
   133	  newOct = remainder * pow(10, digit - 1);
   134	  return(newOct);
   135	}
   136	
   137	/***************************************************************************
   138	*
   139	* Function Information
   140	*
   141	* Name of Function: getBinary
   142	*
   143	* Function Return Type: int
   144	*
   145	* Parameters (list data type, name, and comment one per line):
   146	* 1. int base10 //the initial decimal number
   147	*
   148	* Function Description: Returns the binarhy value given a decimal number
   149	*
   150	***************************************************************************/
   151	
   152	int getBinary(int base10)
   153	{
   154	  int digit; //the decimal place of each digit in the number
   155	  int remainder; //the remainder of the decimal number divided by 8 (1 for ones place, 2 for tens place, etc.)
   156	  int bin; //the current octal value
   157	  
   158	  //set intial conditions
   159	  bin = 0; //octal number
   160	  digit = 0; //digit of the octal number
   161	  
   162	  while(base10 != 0)
   163	  {
   164	    remainder = base10 % 2;
   165	    base10 /= 2;
   166	    digit++;
   167	    bin += ConvertAdd(remainder, digit);
   168	  }
   169	  return(bin);
   170	}
   171	
   172	/***************************************************************************
   173	*
   174	* Function Information
   175	*
   176	* Name of Function: countEvens
   177	*
   178	* Function Return Type: int
   179	*
   180	* Parameters (list data type, name, and comment one per line):
   181	* 1. int[] decimal //decimal values in an array
   182	*
   183	* Function Description: Returns the number of even numbers in the decimal array
   184	*
   185	***************************************************************************/
   186	
   187	int countEvens(int decimal[])
   188	{
   189	  int count; //Incrimentor for the for loop
   190	  int numEvens; //number of even numbers
   191	
   192	  numEvens = 0; //initial value
   193	  for(count = 0; count < 20; count++) //if number is even add 1 to numEven
   194	  {
   195	    if(decimal[count] % 2 == 0)
   196	    {
   197	      numEvens++;
   198	    }
   199	  }
   200	  return(numEvens); //return
   201	}
   202	
   203	/***************************************************************************
   204	*
   205	* Function Information
   206	*
   207	* Name of Function: countOdds
   208	*
   209	* Function Return Type: int
   210	*
   211	* Parameters (list data type, name, and comment one per line):
   212	* 1. int[] decimal //decimal values in an array
   213	*
   214	* Function Description: Returns the number of odd numbers in the decimal array
   215	*
   216	***************************************************************************/
   217	
   218	int countOdds(int decimal[])
   219	{
   220	  int count; //Incrimentor for the for loop
   221	  int numOdds; //number of odd numbers
   222	
   223	  numOdds = 0; //initial value
   224	  for(count = 0; count < 20; count++) //if number is even add 1 to numOdds
   225	  {
   226	    if(decimal[count] % 2 == 1)
   227	    {
   228	      numOdds++;
   229	    }
   230	  }
   231	  return(numOdds); //return values
   232	}
   233	
   234	/***************************************************************************
   235	*
   236	* Function Information
   237	*
   238	* Name of Function: convertArray
   239	*
   240	* Function Return Type: void
   241	*
   242	* Parameters (list data type, name, and comment one per line):
   243	* 1. int[] decimal //decimal values
   244	* 2. int numOdd //number of odd number in decimal
   245	* 3. int numEven //number of even numbers in decimal
   246	*
   247	* Function Description: Converts the decimal array's odd numbers into an array of
   248	* binary numbers and the decimal array's even numbers into an array of octal numbers
   249	*
   250	***************************************************************************/
   251	
   252	void convertArray(int decimal[], int numOdd, int numEven)
   253	{
   254	  int binary[numOdd]; //binary values array
   255	  int octal[numEven]; //octal values array
   256	  int binaryIndex; //iterator for binary index
   257	  int octalIndex; //iterator for octal index
   258	  int count; //array index
   259	
   260	  binaryIndex = 0; //initial values
   261	  octalIndex = 0;
   262	  for (count = 0; count < 20; count++) //for all values in decimal
   263	  {
   264	    if (decimal[count] % 2 == 1) //if number is odd set binary to value
   265	    {
   266	      //stores the binary number in the correct index then iterates the binary index counter
   267	      binary[binaryIndex] = getBinary(decimal[count]);
   268	      binaryIndex++;
   269	    }
   270	    else //else set octal to value
   271	    {
   272	      //stores the octal number in the correct index then iterates the octal index counter
   273	      octal[octalIndex] = getOctal(decimal[count]);
   274	      octalIndex++;
   275	    }
   276	  }
   277	  printArrays(binary, octal, numEven, numOdd); //print arrays
   278	}
   279	
   280	/***************************************************************************
   281	*
   282	* Function Information
   283	*
   284	* Name of Function: printArrays
   285	*
   286	* Function Return Type: void
   287	*
   288	* Parameters (list data type, name, and comment one per line):
   289	* 1. int[] binary //binaryIndex values
   290	* 2. int[] octal //octal values
   291	* 3. int numEven //number of even numbers in the decimal array
   292	* 4. int numOdd //number of odd numbers in the decimal array
   293	*
   294	* Function Description: Prints binary and octal arrays in a formatted mannor
   295	*
   296	***************************************************************************/
   297	
   298	void printArrays(int binary[], int octal[], int numEven, int numOdd)
   299	{
   300	  int count; //array index
   301	  printf("Binary values: ");
   302	  
   303	  if(numOdd != 0) //if there are values
   304	  {
   305	    for (count = 0; count < numOdd; count++) //print each
   306	    {
   307	      printf("%d ", binary[count]);
   308	    }
   309	  }
   310	  else //else print none
   311	  {
   312	    printf("None");
   313	  }
   314	  
   315	  printf("\nOctal values: ");
   316	  
   317	  if(numEven != 0) //if there are values
   318	  {
   319	    for (count = 0; count < numEven; count++) //print each
   320	    {
   321	      printf("%d ", octal[count]);
   322	    }
   323	  }
   324	  else // else print none
   325	  {
   326	    printf("None");
   327	  }
   328	  
   329	  printf("\n");
   330	  
   331	}
